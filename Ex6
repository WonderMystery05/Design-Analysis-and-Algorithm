23bcs074@mepcolinux ex6]$cat fl.c
#include <stdio.h>

#define INF 99999
#define MAX 100

// Function to print the solution matrix
void printSolution(int dist[MAX][MAX], int V) {
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF) {
                printf("%7s", "INF");
            } else {
                printf("%7d", dist[i][j]);
            }
        }
        printf("\n");
    }
}

// Function to implement Floyd's algorithm
void floydWarshall(int graph[MAX][MAX], int V) {
    int dist[MAX][MAX];

    // Initialize the solution matrix same as input graph matrix
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    // Add all vertices one by one to the set of intermediate vertices
    for (int k = 0; k < V; k++) {
        // Print the matrix after each iteration with the intermediate vertex k
        printf("After including vertex %d as an intermediate vertex:\n", k);
        printSolution(dist, V);
        printf("\n");

        // Pick all vertices as source one by one
        for (int i = 0; i < V; i++) {
            // Pick all vertices as destination for the above-picked source
            for (int j = 0; j < V; j++) {
                // If vertex k is on the shortest path from i to j, then update the value of dist[i][j]
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print the final shortest distance matrix
    printf("Final shortest distance matrix:\n");
    printSolution(dist, V);
}

int main() {
    int V;
    int graph[MAX][MAX];

    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    printf("Enter the adjacency matrix (use %d for infinity):\n", INF);
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Print the solution
    floydWarshall(graph, V);

    return 0;
}
[23bcs074@mepcolinux ex6]$cc -std=c99 fl.c
[23bcs074@mepcolinux ex6]$./a.out
Enter the number of vertices: 4
Enter the adjacency matrix (use 99999 for infinity):
0 9999 3 9999
2 0 9999 9999
9999 7 0 1
6 9999 9999 0
After including vertex 0 as an intermediate vertex:
      0   9999      3   9999
      2      0   9999   9999
   9999      7      0      1
      6   9999   9999      0

After including vertex 1 as an intermediate vertex:
      0   9999      3   9999
      2      0      5   9999
   9999      7      0      1
      6   9999      9      0

After including vertex 2 as an intermediate vertex:
      0   9999      3   9999
      2      0      5   9999
      9      7      0      1
      6   9999      9      0

After including vertex 3 as an intermediate vertex:
      0     10      3      4
      2      0      5      6
      9      7      0      1
      6     16      9      0

Final shortest distance matrix:
      0     10      3      4
      2      0      5      6
      7      7      0      1
      6     16      9      0
[23bcs074@mepcolinux ex6]$cat knp.c
#include <stdio.h>
#include <stdlib.h>

void printMatrix(int **matrix, int n, int capacity, int isFinal) {
    if (isFinal) {
        printf("Final Matrix after computation:\n");
    } else {
        printf("Initial Matrix:\n");
    }
    int i,j;
    for ( i = 0; i <= n; i++) {
        for (j = 0; j <= capacity; j++) {
            if (isFinal && matrix[i][j] == 0) {
                printf("-1\t");
            } else {
                printf("%d\t", matrix[i][j]);
            }
        }
        printf("\n");
    }
}

void printRejectionReasons(int **matrix, int n, int capacity, int *weights, int *values) {
   int i,j;
   for ( i = 1; i <= n; i++) {
        for ( j = 0; j <= capacity; j++) {
            if (matrix[i][j] == -1) {
                if (j < weights[i-1]) {
                    printf("Item %d (Weight = %d, Value = %d) rejected: Weight exceeds current capacity %d.\n",
                           i, weights[i-1], values[i-1], j);
                } else {
                    printf("Item %d (Weight = %d, Value = %d) rejected: Value not contributing to maximum value.\n",
                           i, weights[i-1], values[i-1]);
                }
            }
        }
    }
}

int knapsack(int capacity, int *weights, int *values, int n, int *includedItems) {
    int i, w;
    int **f = (int **)malloc((n + 1) * sizeof(int *));
    for (i = 0; i <= n; i++) {
        f[i] = (int *)malloc((capacity + 1) * sizeof(int));
    }
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= capacity; w++) {
            if (i == 0 || w == 0) {
                f[i][w] = 0;
            } else {
                f[i][w] = -1;
            }
        }
    }
    printMatrix(f, n, capacity, 0);
    for (i = 1; i <= n; i++) {
        for (w = 0; w <= capacity; w++) {
            if (weights[i - 1] <= w) {
                int valueWithItem = values[i - 1] + f[i - 1][w - weights[i - 1]];
                f[i][w] = (valueWithItem > f[i - 1][w]) ? valueWithItem : f[i - 1][w];
            } else {
                f[i][w] = f[i - 1][w];
            }
        }
    }
    int maxValue = f[n][capacity];
    int wi = capacity;
    for (i = n; i > 0 && maxValue > 0; i--) {
        if (maxValue != f[i - 1][wi]) {
            includedItems[i - 1] = 1;
            maxValue -= values[i - 1];
            wi -= weights[i - 1];
        } else {
            includedItems[i - 1] = 0;
        }
    }
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= capacity; w++) {
            if (f[i][w] == 0 && !(i == n && w == capacity)) {
                f[i][w] = -1; // Set 0 values to -1 except for the last cell
            }
        }
    }

    printMatrix(f, n, capacity, 1);
    //printRejectionReasons(f, n, capacity, weights, values);

    for (i = 0; i <= n; i++) {
        free(f[i]);
    }
    free(f);
    return f[n][capacity];
}


int main() {
    int *values, *weights;
    int capacity, n, i;

    printf("Enter the number of items: ");
    scanf("%d", &n);

    weights = (int *)malloc(n * sizeof(int));
    values = (int *)malloc(n * sizeof(int));
    int *includedItems = (int *)malloc(n * sizeof(int));

    printf("Enter the weights of the items:\n");
    for (i = 0; i < n; i++) {
        printf("Weight of item %d: ", i + 1);
        scanf("%d", &weights[i]);
    }

    printf("Enter the values of the items:\n");
    for (i = 0; i < n; i++) {
        printf("Value of item %d: ", i + 1);
        scanf("%d", &values[i]);
    }

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    int maxValue = knapsack(capacity, weights, values, n, includedItems);
    printf("\nMaximum value in Knapsack = %d\n", maxValue);

    printf("\nItems included in the knapsack:\n");
    for (i = 0; i < n; i++) {
        if (includedItems[i]) {
            printf("Item %d: Weight = %d, Value = %d\n", i + 1, weights[i], values[i]);
        }
    }

    free(weights);
    free(values);
    free(includedItems);

    return 0;
}
[23bcs074@mepcolinux ex6]$cc -std=c99 knp.c
[23bcs074@mepcolinux ex6]$./a.out
Enter the number of items: 4
Enter the weights of the items:
Weight of item 1: 2
Weight of item 2: 1
Weight of item 3: 3
Weight of item 4: 2
Enter the values of the items:
Value of item 1: 10
Value of item 2: 15
Value of item 3: 5
Value of item 4: 10
Enter the capacity of the knapsack: 6
Initial Matrix:
0       0       0       0       0       0       0
0       -1      -1      -1      -1      -1      -1
0       -1      -1      -1      -1      -1      -1
0       -1      -1      -1      -1      -1      -1
0       -1      -1      -1      -1      -1      -1
Final Matrix after computation:
-1      -1      -1      -1      -1      -1      -1
-1      -1      10      10      10      10      10
-1      15      15      25      25      25      25
-1      15      15      25      25      25      30
-1      15      15      25      25      35      35

Maximum value in Knapsack = 35

Items included in the knapsack:
Item 1: Weight = 2, Value = 10
Item 2: Weight = 1, Value = 15
Item 4: Weight = 2, Value = 10
[23bcs074@mepcolinux ex6]$exit
exit
