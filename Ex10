#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define MAX 10

int tspMatrix[MAX][MAX], N;
int minCost = INT_MAX;
int visited[MAX];
int path[MAX], bestPath[MAX];

void copyPath(int n) {
    for (int i = 0; i <= n; i++)
        bestPath[i] = path[i];
}

int firstMin(int i) {
    int min = INT_MAX;
    for (int k = 0; k < N; k++)
        if (tspMatrix[i][k] && tspMatrix[i][k] < min)
            min = tspMatrix[i][k];
    return min;
}

int secondMin(int i) {
    int first = INT_MAX, second = INT_MAX;
    for (int j = 0; j < N; j++) {
        if (i == j || tspMatrix[i][j] == 0)
            continue;
        if (tspMatrix[i][j] <= first) {
            second = first;
            first = tspMatrix[i][j];
        } else if (tspMatrix[i][j] < second) {
            second = tspMatrix[i][j];
        }
    }
    return second;
}

void tsp(int level, int currentCost, int bound) {
    if (level == N) {
        if (tspMatrix[path[level - 1]][path[0]]) {
            int totalCost = currentCost + tspMatrix[path[level - 1]][path[0]];
            if (totalCost < minCost) {
                minCost = totalCost;
                copyPath(N);
                bestPath[N] = path[0];
            }
        }
        return;
    }

    for (int i = 0; i < N; i++) {
        if (!visited[i] && tspMatrix[path[level - 1]][i]) {
            int tempBound = bound;
            int tempCost = currentCost + tspMatrix[path[level - 1]][i];

            if (level == 1)
                bound -= ((firstMin(path[level - 1]) + firstMin(i)) / 2);
            else
                bound -= ((secondMin(path[level - 1]) + firstMin(i)) / 2);

            if (tempCost + bound < minCost) {
                path[level] = i;
                visited[i] = 1;
                tsp(level + 1, tempCost, bound);
            }

            bound = tempBound;
            visited[i] = 0;
        }
    }
}

int main() {
    printf("Enter the number of cities: ");
    scanf("%d", &N);

    printf("Enter the cost matrix (%dx%d):\n", N, N);
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            scanf("%d", &tspMatrix[i][j]);

    int bound = 0;
    for (int i = 0; i < N; i++)
        bound += (firstMin(i) + secondMin(i));
    bound = (bound % 2 == 0) ? (bound / 2) : (bound / 2 + 1);

    visited[0] = 1;
    path[0] = 0;

    tsp(1, 0, bound);
    printf("*********************************");
    printf("\n\tMinimum cost: %d\n", minCost);
    printf("\tBest path: ");
    for (int i = 0; i <= N; i++)
        printf("%d ", bestPath[i]);
    printf("\n");
    printf("*********************************\n");

    return 0;
}
[23bcs074@mepcolinux ex10]$./a.out
Enter the number of cities: 5
Enter the cost matrix (5x5):
0 3 1 5 8
3 0 6 7 9
1 6 0 4 2
5 7 4 0 3
8 9 2 3 0
*********************************
        Minimum cost: 16
        Best path: 0 1 3 4 2 0
*********************************
[23bcs074@mepcolinux ex10]$exit
exit

